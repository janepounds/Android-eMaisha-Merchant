package com.cabral.emaishamerchantApp.pos;

import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.app.AlertDialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.cabral.emaishamerchantApp.R;
import com.cabral.emaishamerchantApp.adapter.CartAdapter;
import com.cabral.emaishamerchantApp.database.DatabaseAccess;
import com.cabral.emaishamerchantApp.utils.BaseActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import es.dmoral.toasty.Toasty;
import vpos.apipackage.ByteUtil;
import vpos.apipackage.PosApiHelper;
import vpos.apipackage.StringUtil;
import vpos.keypad.EMVCOHelper;

public class ProductCart extends BaseActivity {

    private RecyclerView recyclerView;
    CartAdapter productCartAdapter;
    ImageView imgNoProduct;
    TextView txt_no_product, txt_total_price, btnSubmitOrder;
    LinearLayout linearLayout;

    List<String> customerNames, orderTypeNames, paymentMethodNames;
    ArrayAdapter<String> customerAdapter, orderTypeAdapter, paymentMethodAdapter;

    //pos variable for printing
    int ret = -1;
    private boolean m_bThreadFinished = true;
    public String tag = "PrintActivity-M.J";
    PosApiHelper posApiHelper = PosApiHelper.getInstance();
    private int RESULT_CODE = 0;
    private  final static int PRINT_SERVICE=2;
    private  final static int PAYMENT_SERVICE=1;
    //pos variables for payments
    private EMVCOHelper emvcoHelper = EMVCOHelper.getInstance();
    byte[] capkbuf0_M = {};
    byte[] capkbuf1_V = {};
    byte[] capkbuf2_V = {};
    byte[] capkbuf3_V = {};
    byte[] capkbuf4_V = {};//DF070101
    String Emv_M_Capkinput0 = "9F0605A0000000049F2201F1DF070101DF060101DF0281B0A0DCF4BDE19C3546B4B6F0414D174DDE294AABBB828C5A834D73AAE27C99B0B053A90278007239B6459FF0BBCD7B4B9C6C50AC02CE91368DA1BD21AAEADBC65347337D89B68F5C99A09D05BE02DD1F8C5BA20E2F13FB2A27C41D3F85CAD5CF6668E75851EC66EDBF98851FD4E42C44C1D59F5984703B27D5B9F21B8FA0D93279FBBF69E090642909C9EA27F898959541AA6757F5F624104F6E1D3A9532F2A6E51515AEAD1B43B3D7835088A2FAFA7BE7DF040103DF05083230323331323331DF0314D8E68DA167AB5A85D8C3D55ECB9B0517A1A5B4BB";
    String EMV_V_Capkinput1 = "9F0605A0000000039F220108DF070101DF060101DF0281B0D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0BDF040103DF05083230323331323331DF031420D213126955DE205ADC2FD2822BD22DE21CF9A8";
    String EMV_V_Capkinput2 = "9F0605A0000000039F220192DF070101DF060101DF0281B0996AF56F569187D09293C14810450ED8EE3357397B18A2458EFAA92DA3B6DF6514EC060195318FD43BE9B8F0CC669E3F844057CBDDF8BDA191BB64473BC8DC9A730DB8F6B4EDE3924186FFD9B8C7735789C23A36BA0B8AF65372EB57EA5D89E7D14E9C7B6B557460F10885DA16AC923F15AF3758F0F03EBD3C5C2C949CBA306DB44E6A2C076C5F67E281D7EF56785DC4D75945E491F01918800A9E2DC66F60080566CE0DAF8D17EAD46AD8E30A247C9FDF040103DF05083230323331323331DF0314429C954A3859CEF91295F663C963E582ED6EB253";
    String EMV_V_Capkinput3 = "9F0605A0000000039F220195DF070101DF060101DF028190BE9E1FA5E9A803852999C4AB432DB28600DCD9DAB76DFAAA47355A0FE37B1508AC6BF38860D3C6C2E5B12A3CAAF2A7005A7241EBAA7771112C74CF9A0634652FBCA0E5980C54A64761EA101A114E0F0B5572ADD57D010B7C9C887E104CA4EE1272DA66D997B9A90B5A6D624AB6C57E73C8F919000EB5F684898EF8C3DBEFB330C62660BED88EA78E909AFF05F6DA627BDF040103DF05083230323331323331DF0314EE1511CEC71020A9B90443B37B1D5F6E703030F6";
    String EMV_V_Capkinput4 = "9F0605A0000000039F220194DF070101DF060101DF0281F8ACD2B12302EE644F3F835ABD1FC7A6F62CCE48FFEC622AA8EF062BEF6FB8BA8BC68BBF6AB5870EED579BC3973E121303D34841A796D6DCBC41DBF9E52C4609795C0CCF7EE86FA1D5CB041071ED2C51D2202F63F1156C58A92D38BC60BDF424E1776E2BC9648078A03B36FB554375FC53D57C73F5160EA59F3AFC5398EC7B67758D65C9BFF7828B6B82D4BE124A416AB7301914311EA462C19F771F31B3B57336000DFF732D3B83DE07052D730354D297BEC72871DCCF0E193F171ABA27EE464C6A97690943D59BDABB2A27EB71CEEBDAFA1176046478FD62FEC452D5CA393296530AA3F41927ADFE434A2DF2AE3054F8840657A26E0FC617DF040103DF05083230323331323331DF0314C4A3C43CCF87327D136B804160E47D43B60E6E0F";

    byte[] Master0 = {};//
    String EMV_Aid_input0 = "9F0607A00000000410109F01060000000000019F090200009F150200009F160F3030303030303030303030303030309F4E085465726D696E616CDF1105FE50BCA000DF13050000000000DF1205FE50BCF800DF14039F3704DF150400000000DF160100DF170100DF180201019F1B04000000009F1C084261636B393631325F2A0208405F3601029F3C0208409F3D01029F1D016CDF010100";//DF1906000000050000DF2006000000100000DF21060000001000009F7B06000000100000
    byte[] Visaaid0 = {};

    byte[] Visaaid7 = {};
    byte[] Visaaid8 = {};
    String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    String AID_input
    String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    //String AID_input
    //String AID_input


    byte[] TermParabuf = {};
    String EMV_Term_input = "DF1807FA40F8F0EFF2A09F3501229F3303E0D8C89F4005A000F0E001DF260F9F02065F2A029A039C0195059F3704DF4001FF9F1A030156019F1E081122334455667788DF420101DF430101DF440100DF450100DF460101";

    //***************************************************************************//
    //*****--PAYPASS Parameter Settings--Start**********************************//
    String Reader_input = "9F01060000000000019F150201029F1A020056DF81170100";
    String Kernel_input = "DF6000DF6200DF6300DF810800DF810900DF810A00DF810C0102DF810D00DF811C020000DF811D0100";
    String Aid_input0 = "9C01009F0607A0000000071010DF810C0102DF811B01209F090200029F1D086CFF0000000000009F3501229F33009F400500000000009F6D0200019F7E00DF811A039F6A04DF811F0108DF811801F8DF811901F8DF812C0100DF811E0110DF812306000000010000DF812406000000030000DF812506000000050000DF812606000000004000DF8120050000000000DF8121050000000000DF8122050000000000";
    String Capk_input = "DF0105A000000004DF0201F1DF030103DF0481B0A0DCF4BDE19C3546B4B6F0414D174DDE294AABBB828C5A834D73AAE27C99B0B053A90278007239B6459FF0BBCD7B4B9C6C50AC02CE91368DA1BD21AAEADBC65347337D89B68F5C99A09D05BE02DD1F8C5BA20E2F13FB2A27C41D3F85CAD5CF6668E75851EC66EDBF98851FD4E42C44C1D59F5984703B27D5B9F21B8FA0D93279FBBF69E090642909C9EA27F898959541AA6757F5F624104F6E1D3A9532F2A6E51515AEAD1B43B3D7835088A2FAFA7BE7DF0514D8E68DA167AB5A85D8C3D55ECB9B0517A1A5B4BB";
    String Capk_input1 = "DF0105A000000004DF0201FADF030103DF048190A90FCD55AA2D5D9963E35ED0F440177699832F49C6BAB15CDAE5794BE93F934D4462D5D12762E48C38BA83D8445DEAA74195A301A102B2F114EADA0D180EE5E7A5C73E0C4E11F67A43DDAB5D55683B1474CC0627F44B8D3088A492FFAADAD4F42422D0E7013536C3C49AD3D0FAE96459B0F6B1B6056538A3D6D44640F94467B108867DEC40FAAECD740C00E2B7A8852DDF05145BED4068D96EA16D2D77E03D6036FC7A160EA99C";

    String Capk_input2 = "DF0105A000000004DF020105DF030103DF048180A1F5E1C9BD8650BD43AB6EE56B891EF7459C0A24FA84F9127D1A6C79D4930F6DB1852E2510F18B61CD354DB83A356BD190B88AB8DF04284D02A4204A7B6CB7C5551977A9B36379CA3DE1A08E69F301C95CC1C20506959275F41723DD5D2925290579E5A95B0DF6323FC8E9273D6F849198C4996209166D9BFC973C361CC826E1DF051453D04903B496F59544A84309AF169251F2896874";
    //  String Trans_input = "DF0101009C01009F02060000000000019F03060000000000005F2A0209785F3601025F57009F5301019F7C141020000000000000000000000000000000000001";
    String Trans_input = "9C01009F02060000000000029F03060000000000025F2A0208405F3601029F530101";
    String Aid_inputT = "9C01009F0607A0000000043060DF810C0102DF811B01209F090200029F1D084C7A8000000000009F3501229F3303E0F8C89F40056000F0A0019F6D0200019F7E00DF811A039F6A04DF811F0108DF81180196DF811901F8DF812C0110DF811E0100DF812306000000000000DF812406000000050000DF812506000000050000DF812606000000090001DF812005F45084800CDF8121050000800000DF812205F45084800C";
    String PaypassAid_input = "9C01009F0607A0000000041010DF810C0102DF811B01209F090200029F1D036CF8809F3501119F3303E0F8C89F40056000F0A0019F6D0200019F7E00DF811A039F6A04DF811F0108DF81180160DF81190108DF812C0110DF811E0100DF812306000000000000DF812406000000050000DF812506000000050000DF812606000000009000DF8120050000000000DF8121050000000000DF8122057CD8FCF8F0";


    //*****--PAYwave Parameter Settings--End--*************************************//
    //***************************************************************************//
    String AID_input1 = "9F0608A000000333010102DF010101DF11050020000000DF12050020000000DF13050020000000DF14039F3704DF150400000000DF160100DF1701009F1B04000099999F090200309F150212349F160F3030303030303030303030303030309F4E085465726D696E616C9F1C084261636B393631329F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208419F010512345678919F7B06000000010000DF1906000000011000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input2 = "9F0607A0000000031010DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000050009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208429F010512345678919F7B06000000010000DF1906000000010000DF2006000000020000DF2106000000010000DFC108010000000000";
    String AID_input3 = "9F0607A0000000999090DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000110009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208439F010512345678919F7B06000000010000DF1906000000012000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input4 = "9F0606A00000999901DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000120009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208449F010512345678919F7B06000000010000DF1906000000013000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input5 = "9F0605A000000003DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000130009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208459F010512345678919F7B06000000010000DF1906000000014000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input6 = "9F0606A00000000310DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000140009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208469F010512345678919F7B06000000010000DF1906000000016000DF2006000000020000DF2106000000010000DFC108010100000000";

    String CAPK_input1 = "9F0605A0000099999F2201E1DF070101DF060101DF027099C5B70AA61B4F4C51B6F90B0E3BFB7A3EE0E7DB41BC466888B3EC8E9977C762407EF1D79E0AFB2823100A020C3E8020593DB50E90DBEAC18B78D13F96BB2F57EEDDC30F256592417CDF739CA6804A10A29D2806E774BFA751F22CF3B65B38F37F91B4DAF8AEC9B803F7610E06AC9E6BDF040103DF050420201231DF0314FD3857DA1D0B38F7E740E364071C0C91F26BC454";
    String CAPK_input2 = "9F0605A0000099999F2201E2DF070101DF060101DF0270BD232E348B118EB3F6446EF4DA6C3BAC9B2AE510C5AD107D38343255D21C4BDF4952A42E92C633B1CE4BFEC39AFB6DFE147ECBB91D681DAC15FB0E198E9A7E4636BDCA107BCDA3384FCB28B06AFEF90F099E7084511F3CC010D4343503E1E5A67264B4367DAA9A3949499272E9B5022FDF040103DF050420201231DF0314A77CEDA094E2E764384B451B2AAC0C1F734B0BE5";
    String CAPK_input3 = "9F0605A0000099999F2201E3DF070101DF060101DF0270BC01E12223E1A41E88BFFA801093C5F8CEC5CD05DBBDBB787CE87249E8808327C2D218991F97A1131E8A25B0122ED11E709C533E8886A1259ADDFDCBB396604D24E505A2D0B5DD0384FB0002A7A1EB39BC8A11339C7A9433A948337761BE73BC497B8E58736DA4636538AD282D3CD3DBDF0403010001DF050420201231DF0314358F0F4F0EA6529920B93F842EB2482ED2F7F137";
    String CAPK_input4 = "9F0605A0000099999F2201E4DF070101DF060101DF028180CBF2E40F0836C9A5E390A37BE3B809BDF5D740CB1DA38CFC05D5F8D6B7745B5E9A3FA6961E55FF20412108525E66B970F902F7FF4305DD832CD0763E3AA8B8173F84777100B1047BD1D744509312A0932ED25FED52A959430768CCD902FD8C8AD9123E6ADDB3F34B92E7924D729CB6473533AE2B2B55BF0E44964FDEA8440117DF040103DF050420201231DF0314E9B0FAE14A832D5FB3783F7EF11FE6D3E4B059B1";
    String CAPK_input5 = "9F0605A0000099999F2201E5DF070101DF060101DF028180D4FDAE94DEDBECC6D20D38B01E91826DC6954338379917B2BB8A6B36B5D3B0C5EDA60B337448BAFFEBCC3ABDBA869E8DADEC6C870110C42F5AAB90A18F4F867F72E3386FFC7E67E7FF94EBA079E531B3CF329517E81C5DD9B3DC65DB5F9043190BE0BE897E5FE48ADF5D3BFA0585E076E554F26EC69814797F15669F4A255C13DF040103DF050420201231DF03146B5EFE581C0EE4D5F8DBE18BD656F33E80267855";
    String CAPK_input6 = "9F0605A0000099999F2201E6DF070101DF060101DF028180EBF9FAECC3E5C315709694664775D3FBDA5A504D89344DD920C55696E891D9AB622598A9D6AB8FBF35E4599CAB7EB22F956992F8AB2E6535DECB6B576FA0675F97C23DD4C374A66E6AF419C9D204D0B9F93C08D789D63805660FBB629DF1B488CFA1D7A13E9B729437EEAFE718EFA859348BA0D76812A99F31CD364F2A4FD42FDF0403010001DF050420201231DF0314D6646DFF64D2053EBB9E7C2D19A720A421CDC29D";
    String CAPK_input7 = "9F0605A0000000039F220196DF070101DF060101DF028180B74586D19A207BE6627C5B0AAFBC44A2ECF5A2942D3A26CE19C4FFAEEE920521868922E893E7838225A3947A2614796FB2C0628CE8C11E3825A56D3B1BBAEF783A5C6A81F36F8625395126FA983C5216D3166D48ACDE8A431212FF763A7F79D9EDB7FED76B485DE45BEB829A3D4730848A366D3324C3027032FF8D16A1E44D8DDF040103DF050420201231DF03147616E9AC8BE014AF88CA11A8FB17967B7394030E";
    String CAPK_input8 = "9F0605A0000000039F220150DF070101DF060101DF028180D11197590057B84196C2F4D11A8F3C05408F422A35D702F90106EA5B019BB28AE607AA9CDEBCD0D81A38D48C7EBB0062D287369EC0C42124246AC30D80CD602AB7238D51084DED4698162C59D25EAC1E66255B4DB2352526EF0982C3B8AD3D1CCE85B01DB5788E75E09F44BE7361366DEF9D1E1317B05E5D0FF5290F88A0DB47DF0403010001DF050420201231DF0314B769775668CACB5D22A647D1D993141EDAB7237B";
    String CAPK_input9 = "9F0605A0000000039F220151DF070101DF060101DF028190DB5FA29D1FDA8C1634B04DCCFF148ABEE63C772035C79851D3512107586E02A917F7C7E885E7C4A7D529710A145334CE67DC412CB1597B77AA2543B98D19CF2CB80C522BDBEA0F1B113FA2C86216C8C610A2D58F29CF3355CEB1BD3EF410D1EDD1F7AE0F16897979DE28C6EF293E0A19282BD1D793F1331523FC71A228800468C01A3653D14C6B4851A5C029478E757FDF040103DF050420201231DF0314B9D248075A3F23B522FE45573E04374DC4995D71";
    String CAPK_input10 = "9F0605A0000000039F220152DF070101DF060101DF0281B0AFF740F8DBE763F333A1013A43722055C8E22F41779E219B0E1C409D60AFD45C8789C57EECD71EA4A269A675916CC1C5E1A05A35BD745A79F94555CE29612AC9338769665B87C3CA8E1AC4957F9F61FA7BFFE4E17631E937837CABF43DD6183D6360A228A3EBC73A1D1CDC72BF09953C81203AB7E492148E4CB774CDDFAAC3544D0DD4F8C8A0E9C70B877EA79F2C22E4CE52C69F3EF376F61B0F43A540FE96C63F586310C3B6E39C78C4D647CADB5933DF040103DF050420201231DF031442D96E6E1217E5B59CC2079CE50C3D9F55B6FC1D";
    String CAPK_input11 = "9F0605A0000000039F220153DF070101DF060101DF0281F8BCD83721BE52CCCC4B6457321F22A7DC769F54EB8025913BE804D9EABBFA19B3D7C5D3CA658D768CAF57067EEC83C7E6E9F81D0586703ED9DDDADD20675D63424980B10EB364E81EB37DB40ED100344C928886FF4CCC37203EE6106D5B59D1AC102E2CD2D7AC17F4D96C398E5FD993ECB4FFDF79B17547FF9FA2AA8EEFD6CBDA124CBB17A0F8528146387135E226B005A474B9062FF264D2FF8EFA36814AA2950065B1B04C0A1AE9B2F69D4A4AA979D6CE95FEE9485ED0A03AEE9BD953E81CFD1EF6E814DFD3C2CE37AEFA38C1F9877371E91D6A5EB59FDEDF75D3325FA3CA66CDFBA0E57146CC789818FF06BE5FCC50ABD362AE4B80996DDF040103DF050420201231DF0314AC213A2E0D2C0CA35AD0201323536D58097E4E57";
    String CAPK_input12 = "9F0605A0000000039F220158DF070101DF060101DF0281C899552C4A1ECD68A0260157FC4151B5992837445D3FC57365CA5692C87BE358CDCDF2C92FB6837522842A48EB11CDFFE2FD91770C7221E4AF6207C2DE4004C7DEE1B6276DC62D52A87D2CD01FBF2DC4065DB52824D2A2167A06D19E6A0F781071CDB2DD314CB94441D8DC0E936317B77BF06F5177F6C5ABA3A3BC6AA30209C97260B7A1AD3A192C9B8CD1D153570AFCC87C3CD681D13E997FE33B3963A0A1C79772ACF991033E1B8397AD0341500E48A24770BC4CBE19D2CCF419504FDBF0389BC2F2FDCD4D44E61FDF0403010001DF050420201231DF0314753ED0AA23E4CD5ABD69EAE7904B684A34A57C22";
    String Term_input = "9F4005FF80F020019F3303E0D8C81F0107F4F0F0FCAFFEA09F66042440C0009F3501229A031804109F21030830009F1A0208401F0501011F0601011F0701011F0801011F090101";

    String McrData = "";
    byte track1[] = new byte[250];
    byte track2[] = new byte[250];
    byte track3[] = new byte[250];
    String PaypssTag57_data = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //无title
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        //全屏
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        setContentView(R.layout.activity_product_cart);

        getSupportActionBar().setHomeButtonEnabled(true); //for back button
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);//for back button
        getSupportActionBar().setTitle(R.string.product_cart);

        recyclerView = findViewById(R.id.cart_recyclerview);
        imgNoProduct = findViewById(R.id.image_no_product);
        btnSubmitOrder = findViewById(R.id.btn_submit_order);
        txt_no_product = findViewById(R.id.txt_no_product);
        linearLayout = findViewById(R.id.linear_layout);
        txt_total_price = findViewById(R.id.txt_total_price);

        txt_no_product.setVisibility(View.GONE);


        // set a GridLayoutManager with default vertical orientation and 3 number of columns
        final LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getApplicationContext());
        recyclerView.setLayoutManager(linearLayoutManager); // set LayoutManager to RecyclerView


        recyclerView.setHasFixedSize(true);


        final DatabaseAccess databaseAccess = DatabaseAccess.getInstance(ProductCart.this);
        databaseAccess.open();


        //get data from local database
        List<HashMap<String, String>> cartProductList;
        cartProductList = databaseAccess.getCartProduct();

        Log.d("CartSize", "" + cartProductList.size());

        if (cartProductList.size() <= 0) {
            // Toast.makeText(this, "No Product Found!", Toast.LENGTH_SHORT).show();
            imgNoProduct.setImageResource(R.drawable.empty_cart);
            imgNoProduct.setVisibility(View.VISIBLE);
            txt_no_product.setVisibility(View.VISIBLE);
            btnSubmitOrder.setVisibility(View.GONE);
            recyclerView.setVisibility(View.GONE);
            linearLayout.setVisibility(View.GONE);
            txt_total_price.setVisibility(View.GONE);
        } else {


            imgNoProduct.setVisibility(View.GONE);
            productCartAdapter = new CartAdapter(ProductCart.this, cartProductList, txt_total_price, btnSubmitOrder, imgNoProduct, txt_no_product);

            recyclerView.setAdapter(productCartAdapter);


        }


        btnSubmitOrder.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                dialog();

                //makePayment();
            }
        });
       // makePayment();

    }


    @Override
    protected void onResume() {
        //disable the power key
        disableFunctionLaunch(true);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        super.onResume();
        //isOpen = false;
    }



    @Override
    protected void onPause() {
        //enable the power key
        disableFunctionLaunch(false);
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        super.onPause();

        if (paymentThread != null) {
            paymentThread.interrupt();
            emvcoHelper.EmvFinal();
            return;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        PosApiHelper.getInstance().EntryPoint_Close();

        //add by liuhao 0529 close led
//        closeLed();

        if (paymentThread != null) {
            paymentThread.interrupt();
        }

    }
    @Override
    public void onBackPressed() {
        super.onBackPressed();

        if (paymentThread != null && !paymentThread.isThreadFinished()) {
            Log.e("MJ", "onBackPressed() , Thread is still running...");
            paymentThread.interrupt();
//            emvcoHelper.EmvFinal();
//            return;
        }

        //add by liuhao 20180302
        if (mIBackFinish != null) {
            mIBackFinish.isBack();
            bIsBack = true;
        }

        //Close Emv Com
        emvcoHelper.EmvFinal();

        ProductCart.this.finish();
    }



    //for save data in offline
    private boolean saveOrderInOfflineDb(final JSONObject obj, String orderNumber) {

        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(ProductCart.this);

        databaseAccess.open();
        /*
        timestamp used for un sync order and make it unique id
         */
       return databaseAccess.insertOrder(orderNumber, obj);

    }
    private String generateOrderNumber(){
        //get current timestamp
        Long tsLong = System.currentTimeMillis() / 1000;
        return tsLong.toString();
    }
    AlertDialog alertDialog;

    String order_type ,order_payment_method , customer_name ;

    //dialog for taking otp code
    public void dialog() {

        AlertDialog.Builder dialog = new AlertDialog.Builder(ProductCart.this);
        View dialogView = getLayoutInflater().inflate(R.layout.dialog_payment, null);
        dialog.setView(dialogView);
        dialog.setCancelable(false);

        final Button dialog_btn_submit = dialogView.findViewById(R.id.btn_submit);
        final ImageButton dialog_btn_close = dialogView.findViewById(R.id.btn_close);
        final TextView dialog_order_payment_method = dialogView.findViewById(R.id.dialog_order_status);
        final TextView dialog_order_type = dialogView.findViewById(R.id.dialog_order_type);
        final TextView dialog_customer = dialogView.findViewById(R.id.dialog_customer);

        final ImageButton dialog_img_customer = dialogView.findViewById(R.id.img_select_customer);
        final ImageButton dialog_img_order_payment_method = dialogView.findViewById(R.id.img_order_payment_method);
        final ImageButton dialog_img_order_type = dialogView.findViewById(R.id.img_order_type);


        customerNames = new ArrayList<>();

        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(ProductCart.this);
        databaseAccess.open();

        //get data from local database
        final List<HashMap<String, String>> customer;
        customer = databaseAccess.getCustomers();

        for (int i = 0; i < customer.size(); i++) {

            // Get the ID of selected Country
            customerNames.add(customer.get(i).get("customer_name"));

        }


        orderTypeNames = new ArrayList<>();
        databaseAccess.open();

        //get data from local database
        final List<HashMap<String, String>> order_types;
        order_types = databaseAccess.getOrderType();

        for (int i = 0; i < order_types.size(); i++) {

            // Get the ID of selected Country
            orderTypeNames.add(order_types.get(i).get("order_type_name"));

        }


        //payment methods
        paymentMethodNames = new ArrayList<>();
        databaseAccess.open();

        //get data from local database
        final List<HashMap<String, String>> payment_method;
        payment_method = databaseAccess.getPaymentMethod();

        for (int i = 0; i < payment_method.size(); i++) {

            // Get the ID of selected Country
            paymentMethodNames.add(payment_method.get(i).get("payment_method_name"));

        }


        dialog_img_order_payment_method.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                paymentMethodAdapter = new ArrayAdapter<String>(ProductCart.this,R.layout.list_row);
                paymentMethodAdapter.addAll(paymentMethodNames);

                AlertDialog.Builder dialog = new AlertDialog.Builder(ProductCart.this);
                View dialogView = getLayoutInflater().inflate(R.layout.dialog_list_search, null);
                dialog.setView(dialogView);
                dialog.setCancelable(false);

                Button dialog_button = (Button) dialogView.findViewById(R.id.dialog_button);
                EditText dialog_input = (EditText) dialogView.findViewById(R.id.dialog_input);
                TextView dialog_title = (TextView) dialogView.findViewById(R.id.dialog_title);
                ListView dialog_list = (ListView) dialogView.findViewById(R.id.dialog_list);

//                dialog_title.setText(getString(R.string.zone));
                dialog_title.setText(R.string.select_payment_method);
                dialog_list.setVerticalScrollBarEnabled(true);
                dialog_list.setAdapter(paymentMethodAdapter);

                dialog_input.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
                        paymentMethodAdapter.getFilter().filter(charSequence);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });


                final AlertDialog alertDialog = dialog.create();

                dialog_button.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        alertDialog.dismiss();
                    }
                });

                alertDialog.show();


                dialog_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                        alertDialog.dismiss();
                        String selectedItem = paymentMethodAdapter.getItem(position);


                        dialog_order_payment_method.setText(selectedItem);


                    }
                });
            }


        });


        dialog_img_order_type.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                orderTypeAdapter = new ArrayAdapter<String>(ProductCart.this, R.layout.list_row);
                orderTypeAdapter.addAll(orderTypeNames);

                AlertDialog.Builder dialog = new AlertDialog.Builder(ProductCart.this);
                View dialogView = getLayoutInflater().inflate(R.layout.dialog_list_search, null);
                dialog.setView(dialogView);
                dialog.setCancelable(false);

                Button dialog_button = (Button) dialogView.findViewById(R.id.dialog_button);
                EditText dialog_input = (EditText) dialogView.findViewById(R.id.dialog_input);
                TextView dialog_title = (TextView) dialogView.findViewById(R.id.dialog_title);
                ListView dialog_list = (ListView) dialogView.findViewById(R.id.dialog_list);

//                dialog_title.setText(getString(R.string.zone));
                dialog_title.setText(R.string.select_order_type);
                dialog_list.setVerticalScrollBarEnabled(true);
                dialog_list.setAdapter(orderTypeAdapter);

                dialog_input.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
                        orderTypeAdapter.getFilter().filter(charSequence);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });


                final AlertDialog alertDialog = dialog.create();

                dialog_button.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        alertDialog.dismiss();
                    }
                });

                alertDialog.show();


                dialog_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                        alertDialog.dismiss();
                        String selectedItem = orderTypeAdapter.getItem(position);


                        dialog_order_type.setText(selectedItem);


                    }
                });
            }


        });


        dialog_img_customer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                customerAdapter = new ArrayAdapter<String>(ProductCart.this, R.layout.list_row);
                customerAdapter.addAll(customerNames);

                AlertDialog.Builder dialog = new AlertDialog.Builder(ProductCart.this);
                View dialogView = getLayoutInflater().inflate(R.layout.dialog_list_search, null);
                dialog.setView(dialogView);
                dialog.setCancelable(false);

                Button dialog_button = (Button) dialogView.findViewById(R.id.dialog_button);
                EditText dialog_input = (EditText) dialogView.findViewById(R.id.dialog_input);
                TextView dialog_title = (TextView) dialogView.findViewById(R.id.dialog_title);
                ListView dialog_list = (ListView) dialogView.findViewById(R.id.dialog_list);

//                dialog_title.setText(getString(R.string.zone));
                dialog_title.setText(R.string.select_customer);
                dialog_list.setVerticalScrollBarEnabled(true);
                dialog_list.setAdapter(customerAdapter);

                dialog_input.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
                        customerAdapter.getFilter().filter(charSequence);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });


                final AlertDialog alertDialog = dialog.create();

                dialog_button.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        alertDialog.dismiss();
                    }
                });

                alertDialog.show();


                dialog_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                        alertDialog.dismiss();
                        String selectedItem = customerAdapter.getItem(position);


                        dialog_customer.setText(selectedItem);


                    }
                });
            }
        });


        alertDialog = dialog.create();
        alertDialog.show();


        dialog_btn_submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                order_type = dialog_order_type.getText().toString().trim();
                order_payment_method = dialog_order_payment_method.getText().toString().trim();
                customer_name = dialog_customer.getText().toString().trim();

                Log.d("order type", order_type);
                Log.d("order payment method", order_payment_method);
                Log.d("customer name", customer_name);

                alertDialog.dismiss();
                String order=generateOrderNumber();

                printThread = new Pos_Thread(order,PRINT_SERVICE);
                paymentThread = new Pos_Thread(order,PAYMENT_SERVICE);
                paymentThread.start();

                try {
                    paymentThread.join(60000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                printThread.start();


                try {
                    paymentThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }


            }


        });


        dialog_btn_close.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                alertDialog.dismiss();
            }
        });



    }


    //for back button
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {

            case android.R.id.home:
                // app icon in action bar clicked; goto parent activity.
                this.finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    Handler mHandler = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            Bundle b = msg.getData();
            String strInfo = b.getString("MSG");
            Toast.makeText(ProductCart.this,strInfo, Toast.LENGTH_LONG).show();
        }
    };
    public void SendMsg(String strInfo) {
        Message msg = new Message();
        Bundle b = new Bundle();
        b.putString("MSG", strInfo);
        msg.setData(b);
        mHandler.sendMessage(msg);
    }
    interface IBackFinish {
        void isBack();
    }

    IBackFinish mIBackFinish;

    public void setIBackFinish(IBackFinish mIBackFinish) {
        this.mIBackFinish = mIBackFinish;
    }

    private boolean bIsBack = false;

    Pos_Thread printThread = null;
    Pos_Thread paymentThread = null;
    int mCardType = -1;

    String Tag5A_data = "";
    String Tag57_data = "";
    String PAN = "";
    String Tag95_data = "";
    String strEmvStatus = "";

    public class Pos_Thread extends Thread {

        int SERVICE;
        String order;

        public boolean isThreadFinished() {
            return m_bThreadFinished;
        }

        public Pos_Thread(String order, int Service){
            this.order=order;
            this.SERVICE=Service;
        }

        public void run() {
            Log.e("M.J", "Pos_Thread[ run ] run() begin");

            synchronized (this) {
                switch (SERVICE) {

                    case PRINT_SERVICE:

                        m_bThreadFinished = false;

                        final DatabaseAccess databaseAccess = DatabaseAccess.getInstance(ProductCart.this);
                        databaseAccess.open();

                        int itemCount = databaseAccess.getCartItemCount();

                        final JSONObject orderObj = new JSONObject();
                        final JSONArray comodityObjectArray = new JSONArray();
                        //get data from local database //Products being sold
                        databaseAccess.open();
                        final List<HashMap<String, String>> lines= databaseAccess.getCartProduct();
                        //Get Shop information
                        databaseAccess.open();
                        final List<HashMap<String, String>> shopInfo = databaseAccess.getShopInformation();

                        if (itemCount > 0) {


                            if (lines.size() <= 0) {
                                Toasty.error(ProductCart.this, R.string.no_product_found, Toast.LENGTH_SHORT).show();
                            } else {
                                //get current timestamp
                                String currentDate = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).format(new Date());
                                //H denote 24 hours and h denote 12 hour hour format
                                String currentTime = new SimpleDateFormat("hh:mm a", Locale.ENGLISH).format(new Date()); //HH:mm:ss a

                                //timestamp use for invoice id for unique
                                Long tsLong = System.currentTimeMillis() / 1000;
                                String timeStamp = tsLong.toString();
                                Log.d("Time", timeStamp);

                                try {

                                    orderObj.put("order_date", currentDate);
                                    orderObj.put("order_time", currentTime);
                                    orderObj.put("order_type", order_type);
                                    orderObj.put("order_payment_method", order_payment_method);
                                    orderObj.put("customer_name", customer_name);




                                    for (int i = 0; i < lines.size(); i++) {

                                        databaseAccess.open();
                                        String product_id = lines.get(i).get("product_id");
                                        String product_name = databaseAccess.getProductName(product_id);

                                        databaseAccess.open();
                                        String weight_unit_id = lines.get(i).get("product_weight_unit");
                                        String weight_unit = databaseAccess.getWeightUnitName(weight_unit_id);


                                        databaseAccess.open();
                                        String product_image = databaseAccess.getProductImage(product_id);

                                        JSONObject objp = new JSONObject();
                                        objp.put("product_name", product_name);
                                        objp.put("product_weight", lines.get(i).get("product_weight") + " " + weight_unit);
                                        objp.put("product_qty", lines.get(i).get("product_qty"));
                                        objp.put("product_price", lines.get(i).get("product_price"));
                                        objp.put("product_image", product_image);
                                        objp.put("product_order_date", currentDate);

                                        comodityObjectArray.put(objp);

                                    }
                                    orderObj.put("lines", comodityObjectArray);


                                } catch (JSONException e) {
                                    e.printStackTrace();
                                    Log.e("Error",e.getMessage());
                                }



                            }

                        }
                        else {
                            Toasty.error(ProductCart.this, R.string.no_product_in_cart, Toast.LENGTH_SHORT).show();
                        }


                        if(saveOrderInOfflineDb(orderObj, order)){
                            ret = posApiHelper.PrintInit(4, (byte) 20, (byte) 20, (byte) 0x33);
                            Log.e(tag, "init code:" + ret);

                            RESULT_CODE = 0;

                            String shop_name = shopInfo.get(0).get("shop_name");
                            String shop_contact = shopInfo.get(0).get("shop_contact");
                            String shop_address = shopInfo.get(0).get("shop_address");
                            String shop_currency = shopInfo.get(0).get("shop_currency");
                            posApiHelper.PrintStr(""+shop_name.toUpperCase()+"  \n");

                            posApiHelper.PrintSetFont((byte) 24, (byte) 24, (byte) 0x00);
                            posApiHelper.PrintSetGray(3);
                            posApiHelper.PrintStr(shop_address.toUpperCase()+"\n");
                            posApiHelper.PrintStr(shop_contact.toUpperCase()+"\n");

                            posApiHelper.PrintSetFont((byte) 24, (byte) 24, (byte) 0x00);
                            posApiHelper.PrintSetGray(2);
                            posApiHelper.PrintStr("===============================\n\n");
                            double totalprice=0;
                            for (int i = 0; i < comodityObjectArray.length(); i++) {


                                JSONObject objp = null;
                                try {
                                    objp = (JSONObject) comodityObjectArray.get(i);
                                    objp.getString("product_price");
                                    posApiHelper.PrintStr(objp.getString("product_name")+" ("+objp.getString("product_qty")+") : UGX "+objp.getString("product_price")+" \n\n");
                                    totalprice+= Double.parseDouble(objp.getString("product_price"));
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }


                            }
                            String orderPayment= null,orderDate=null;
                            try {
                                orderPayment = orderObj.getString("order_payment_method");
                                orderDate = orderObj.getString("order_date");
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                            posApiHelper.PrintStr("Sub Total          UGX "+totalprice+"\n\n");
                            posApiHelper.PrintStr("===============================\n\n");
                            posApiHelper.PrintStr("Total To Pay       UGX "+totalprice+"\n\n");
                            posApiHelper.PrintStr(""+orderPayment+" Debit\n");
                            posApiHelper.PrintStr(orderDate+"    ORDER. "+order+" \n\n");
                            posApiHelper.PrintStr("===============================\n\n");
                            posApiHelper.PrintStr("         --IMPORTANT--         \n");
                            posApiHelper.PrintStr("Keep This Copy for your Records\n\n");
                            posApiHelper.PrintStr("THANKS FOR SHOPPING AT "+shop_name.toUpperCase()+"\n\n");
                            posApiHelper.PrintStr("                                         \n");
                            posApiHelper.PrintStr("                                         \n");
                            posApiHelper.PrintStr("                                         \n");

                            SendMsg("Printing... ");
                            final long starttime_long = System.currentTimeMillis();
                            ret = posApiHelper.PrintStart();

                            Log.e(tag, "PrintStart ret = " + ret);


                            if (ret != 0) {
                                    RESULT_CODE = -1;
                                    Log.e("PrintError", "Lib_PrnStart fail, ret = " + ret);
                                    if (ret == -1) {
                                        SendMsg("No Print Paper  ");
                                    } else if(ret == -2) {
                                        SendMsg("low hot ");
                                    }else if(ret == -3) {
                                        SendMsg("low voltage  ");
                                    }
                                    else{
                                       SendMsg("Print fail ");
                                    }

                            } else {
                                RESULT_CODE = 0;
                                Log.w("","Print Finish ");
                            }
                            final long endttime_long = System.currentTimeMillis();
                            final long totaltime_long = starttime_long - endttime_long;
                            Log.w("printtime", "Print Long Totaltimie " + totaltime_long +"Ms");

                        }


                        m_bThreadFinished = true;
                        Log.e(tag, "goToSleep2...");

                        break;

                    case PAYMENT_SERVICE:
                        m_bThreadFinished = false;
                        //card debit process begins
                        int ret = 0;

                        PosApiHelper.getInstance().SysLogSwitch(1);

                        //paypass
                        emvcoHelper.PaypassKernelInit();//---step 1
                        //   emvcoHelper.PaypassAidSet(Aid_input0);//---step 2
                        emvcoHelper.PaypassAidSet(PaypassAid_input);//
                        emvcoHelper.PaypassAidSet(Aid_inputT);//
                        emvcoHelper.PaypassCapkSet(Capk_input); //---step 3
                        emvcoHelper.PaypassCapkSet(Capk_input1); //---step 3
                        emvcoHelper.PaypassCapkSet(Capk_input2); //---step 3
                        emvcoHelper.PaypassReaderSet(Reader_input); //---step 4
                        emvcoHelper.PaypassKernelSet(Kernel_input); //---step 5
                        emvcoHelper.PaypassTransSet(Trans_input); //---step 6

                        //paywave
                        emvcoHelper.PayWaveKernelInit();
                        emvcoHelper.PayWaveClearAllTerm();
                        emvcoHelper.PayWaveClearAllCapk();
                        emvcoHelper.PayWaveClearAllAIDS();
                        emvcoHelper.PayWaveAddAids(AID_input1);
                        emvcoHelper.PayWaveAddAids(AID_input2);
                        emvcoHelper.PayWaveAddAids(AID_input3);
                        emvcoHelper.PayWaveAddAids(AID_input4);
                        emvcoHelper.PayWaveAddAids(AID_input5);
                        emvcoHelper.PayWaveAddAids(AID_input6);
                        emvcoHelper.PayWaveAddCapks(CAPK_input1);
                        emvcoHelper.PayWaveAddCapks(CAPK_input2);
                        emvcoHelper.PayWaveAddCapks(CAPK_input3);
                        emvcoHelper.PayWaveAddCapks(CAPK_input4);
                        emvcoHelper.PayWaveAddCapks(CAPK_input5);
                        emvcoHelper.PayWaveAddCapks(CAPK_input6);
                        emvcoHelper.PayWaveAddCapks(CAPK_input7);
                        emvcoHelper.PayWaveAddCapks(CAPK_input8);
                        emvcoHelper.PayWaveAddCapks(CAPK_input9);
                        emvcoHelper.PayWaveAddCapks(CAPK_input10);
                        emvcoHelper.PayWaveAddCapks(CAPK_input11);
                        emvcoHelper.PayWaveAddCapks(CAPK_input12);
                        emvcoHelper.PayWaveAddTerms(Term_input);


                        byte picc_mode = 'M';
                        byte cardtype[] = new byte[3];
                        byte serialNo[] = new byte[50];
                        byte ATR[] = new byte[40];
                        byte PaypassTagBuff[] = new byte[1024];

                        final long time = System.currentTimeMillis();
                        PosApiHelper.getInstance().EntryPoint_Open();
                        while (System.currentTimeMillis() < time + 30 * 1000) {

                            if (bIsBack) {
                                Log.e("VPOS", "*****************loop detecting bIsBack 11");
                                m_bThreadFinished = true;
                                return;
                            }

                            setIBackFinish(new IBackFinish() {
                                public void isBack() {
                                    Log.e("VPOS", "*************setIBackFinish loop");
                                    m_bThreadFinished = true;
                                    return;
                                }
                            });

                            int index = 0;
                            String CheckCard_data = "";
                            mCardType = PosApiHelper.getInstance().EntryPoint_Detect();
                            Log.e("VPOS", "EntryPoint_Detect mCardType== "+mCardType);
                            if (mCardType >= 0){
                                break;
                            }else {
                                Log.e("VPOS", "*************loop detecting return ");

                                PosApiHelper.getInstance().EntryPoint_Close();

                                m_bThreadFinished = true;
                                return;
                            }
                        }

                        Log.e("VPOS", "*************loop detecting return 00");
                        PosApiHelper.getInstance().EntryPoint_Close();
                        Log.e("VPOS", "*************loop detecting return11 ");



                        if (mCardType == -1) {
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    if (bIsBack) {
                                        Toast.makeText(ProductCart.this, R.string.emvTips,Toast.LENGTH_LONG).show();
                                    } else {
                                        Toast.makeText(ProductCart.this, "timeOut~",Toast.LENGTH_LONG).show();
                                    }
                                }
                            });

                            m_bThreadFinished = true;

                            return;
                        } else if (mCardType == 0) {
                            McrData = "";
                            Log.e("Mcrtest", "Mcrtest start00");

                            PosApiHelper posApiHelper = PosApiHelper.getInstance();
                            Log.e("Mcrtest", "Mcrtest start11");
                            Arrays.fill(track1, (byte) 0x00);
                            Arrays.fill(track2, (byte) 0x00);
                            Arrays.fill(track3, (byte) 0x00);
                            Log.e("Mcrtest", "Mcrtest start22");
                            ret = posApiHelper.McrRead((byte) 0, (byte) 0, track1, track2, track3);
                            Log.e("Mcrtest", "Mcrtest start44=" + ret);
                            if (ret >= 0) {
                                if ((ret & 0x01) == 0x01) {
                                    McrData = "track1:" + new String(track1).trim();
                                }
                                if ((ret & 0x02) == 0x02) {
                                    McrData = McrData + "\n\ntrack2:" + new String(track2).trim();
                                }
                                if ((ret & 0x04) == 0x04) {
                                    McrData = McrData + "\n\ntrack3:" + new String(track3).trim();
                                }
                            } else {
                                McrData = "Lib_MsrRead check data error";
                            }
                            posApiHelper.McrClose();
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    Toast.makeText(ProductCart.this, "MCR:  " + McrData, Toast.LENGTH_LONG).show();
                                    Log.w( "MCR:  " ,"......."+McrData);
                                }
                            });
                        } else
                            ///*******************-----EMV contact---******************************///
                            if (mCardType == 1) {
                                Tag5A_data = "";
                                Log.w("EMV","...............EMV Contact pay Process begin......................");
                                PosApiHelper.getInstance().SysLogSwitch(1);
                                emvcoHelper.EmvEnvParaInit();  // 1
                                emvcoHelper.EmvClearAllCapks();// 2
                                emvcoHelper.EmvClearAllAIDS(); // 2

                                // CAPK
                                capkbuf0_M = StringUtil.hexStringToBytes(Emv_M_Capkinput0);
                                emvcoHelper.EmvAddOneCAPK(capkbuf0_M, capkbuf0_M.length);

                                capkbuf1_V = StringUtil.hexStringToBytes(EMV_V_Capkinput1);
                                emvcoHelper.EmvAddOneCAPK(capkbuf1_V, capkbuf1_V.length);
                                capkbuf2_V = StringUtil.hexStringToBytes(EMV_V_Capkinput2);
                                emvcoHelper.EmvAddOneCAPK(capkbuf2_V, capkbuf2_V.length);
                                capkbuf3_V = StringUtil.hexStringToBytes(EMV_V_Capkinput3);
                                emvcoHelper.EmvAddOneCAPK(capkbuf3_V, capkbuf3_V.length);
                                capkbuf4_V = StringUtil.hexStringToBytes(EMV_V_Capkinput4);
                                emvcoHelper.EmvAddOneCAPK(capkbuf4_V, capkbuf4_V.length);

                                Master0 = StringUtil.hexStringToBytes(EMV_Aid_input0);
                                Visaaid0 = StringUtil.hexStringToBytes(AID_input0);
                                Visaaid7 = StringUtil.hexStringToBytes(AID_input7);
                                Visaaid8 = StringUtil.hexStringToBytes(AID_input8);
                                TermParabuf = StringUtil.hexStringToBytes(EMV_Term_input);

                                // AID + TermPara
                                emvcoHelper.EmvAddOneAIDS(Master0, Master0.length);
                                emvcoHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);
                                //   ret = emvcoHelper.EmvGetErrCode();
                                Log.e("VPOS", "ERROR    : EmvGetErrCode = "+ret);

                                emvcoHelper.EmvAddOneAIDS(Visaaid0, Visaaid0.length);
                                emvcoHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

                                emvcoHelper.EmvAddOneAIDS(Visaaid7, Visaaid7.length);
                                emvcoHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

                                emvcoHelper.EmvAddOneAIDS(Visaaid8, Visaaid8.length);
                                emvcoHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

                                ret = emvcoHelper.EmvKeyPadInit(ProductCart.this);
                                emvcoHelper.SetPinPadTime(20);  //set pinpad timeout is 20 seconds

                                Log.w("Error","Loading keypad............"+ret);
                                if (ret != 0) {
                                    m_bThreadFinished = true;
                                    return;
                                }
                                short TagCardNo = 0x5A;
                                int TagCardNo_len;
                                byte CardNoData[] = new byte[56];

                                int TagPIN = 0xDF7E;
                                int TagKSN = 0xDF7F;
                                int PinData_len, KsnData_len;
                                byte PinData[] = new byte[56];
                                byte KsnData[] = new byte[56];
                                 //emvcoHelper.SetPinPadType(0);
                                emvcoHelper.SetPinPadType(1);
                                emvcoHelper.EmvKernelInit();

                                emvcoHelper.EmvSetTransType(1);
                                emvcoHelper.EmvSetTransAmount(100);
                                emvcoHelper.EmvSetCardType(1);
                                emvcoHelper.SetAutoAddKSNPIN(1, 2);
                                try{
                                    ret = emvcoHelper.EmvProcess(1, 0);  //The FLOWTYPE value is 1- simplifies the process
                                }catch (Exception e){
                                    Log.e("VPOS Error", "EmvProcess exception --->"+e.getMessage());
                                }
                                Log.e("VPOS MJ", "EmvProcess ret = " + ret);
//*/
                                //        ret = emvcoHelper.EmvGetErrCode();
                                Log.e("VPOS MJ", "EmvGetErrCode = "+ret);

                                if (ret < 0) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV Termination";
                                            Toast.makeText(ProductCart.this, strEmvStatus,Toast.LENGTH_LONG).show();
                                        }
                                    });
                                    m_bThreadFinished = true;
                                    return;
                                } else if (ret == 3) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV  GO ONLINE";
                                        }
                                    });
                                }
                                TagCardNo_len = emvcoHelper.EmvGetTagData(CardNoData, 56, TagCardNo);
                                for (int i = 0; i < TagCardNo_len; i++) {
                                    Log.e("CardNoData", "i = " + i + "  " + CardNoData[i]);
                                    Tag5A_data += ByteUtil.byteToHexString(CardNoData[i] /*& 0xFF*/);
                                }

                                if (TagCardNo_len % 2 != 0) {
                                    Tag5A_data = Tag5A_data.substring(0, TagCardNo_len * 2 - 1);
                                }
                                PinData_len = emvcoHelper.EmvGetTagData(PinData, 56, TagPIN);
                                final String TagPin_data = ByteUtil.bytearrayToHexString(PinData, PinData_len);
                                KsnData_len =  emvcoHelper.EmvGetTagData(KsnData, 56, TagKSN);
                                final String Ksn_data = ByteUtil.bytearrayToHexString(KsnData, KsnData_len);
                                final int bypass = emvcoHelper.EmvPinbyPass();
                                runOnUiThread(new Runnable() {
                                    public void run() {

                                        Toast.makeText(ProductCart.this, strEmvStatus + "\nCardNO:" + Tag5A_data + "\n" + "PIN0:" + TagPin_data + "\n" + "KSN0:" + Ksn_data,Toast.LENGTH_LONG).show();
                                        //  tvEmvMsg.setText("\n\nPinbypass:" + bypass);
                                        //   tvEmvMsg.setText("EMV Test complete");
                                    }
                                });
                                Log.e("EMV PinData", "-TagPin_data=----" + TagPin_data);

                                emvcoHelper.EmvFinal();

                                Log.w("EMV","...............EMV Contact pay Process end......................");
                            }
                            ///*******************----Contactless-Quics and PayWave---******************************///
                            else if (mCardType == 3) {
                                Log.e("paywaveunipay", "paywaveunipay0000");
                                Tag5A_data = "";
                                ret = emvcoHelper.EmvKeyPadInit(ProductCart.this);
                                emvcoHelper.SetPinPadTime(20);  //set pinpad timeout is 20 seconds
                                if (ret != 0) {
                                    m_bThreadFinished = true;
                                    return;
                                }
                                short TagCardNo = 0x57;
                                short TagTvr = 0x95;
                                int TagCardNo_len;
                                int TagTVR_len;
                                byte CardNoData[] = new byte[56];
                                byte TVRData[] = new byte[56];
                                short TagPIN = 0xBD;
                                int PinData_len;
                                byte PinData[] = new byte[56];
                                byte result[] = new byte[2];


                                emvcoHelper.PayWaveSetTransType(0x00);
                                emvcoHelper.PayWaveSetTransAmount(100);
                                emvcoHelper.PayWaveSetOtherTransAmount(100);

                                Log.e("liuhaoPayWave", "PayWave TEST");

                                ret = emvcoHelper.PayWaveTransProcess();

                                Log.e("liuhaoPayWave", "ret = " + ret);
                                if (ret < 0) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV Termination";
                                            Toast.makeText(ProductCart.this, strEmvStatus,Toast.LENGTH_LONG).show();
                                            emvcoHelper.PayWaveFinal();
                                        }
                                    });
                                    m_bThreadFinished = true;
//                                    return;

                                } else if (ret == 22) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV  GOONLINE";
                                        }
                                    });
                                }else if (ret == 101) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV_ACCEPTED_OFFLINE";
                                        }
                                    });
                                }else if (ret == 102) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            strEmvStatus = "EMV_DENIALED_OFFLINE";
                                        }
                                    });
                                }

                                int pinkey_n0 = 1;
                                int timeout_s0 = 10;
                                byte[] card_no0 = PAN.getBytes(); //123456789012345678
                                byte[] mode0 = new byte[]{1};
                                byte[] pin_block0 = new byte[8];
                                //    emvcoHelper.EmvSetPtcCounter(2);

                                //     ret = emvcoHelper.EmvGetPinBlock(ProductCart.this, 1, pinkey_n0, card_no0, mode0, pin_block0, timeout_s0);

                                Log.e("Robert EmvGetPinBlock", "EmvGetPinBlock ret=  " +ret);

                                TagCardNo_len = emvcoHelper.PayWaveGetTagData(CardNoData, 56, TagCardNo);
                                for (int i = 0; i < TagCardNo_len; i++) {
                                    Log.e("Robert CardNoData", "i = " + i + "  " + CardNoData[i]);
                                    Tag57_data += ByteUtil.byteToHexString(CardNoData[i] /*& 0xFF*/);
                                }

                                if (TagCardNo_len % 2 != 0) {
                                    Tag57_data = Tag57_data.substring(0, TagCardNo_len * 2 - 1);
                                }
                                Log.e("Robert Tag57", "-Tag57_data=----" + Tag57_data);

                                PAN = getContactlessPan(Tag57_data);

                                TagTVR_len = emvcoHelper.PayWaveGetTagData(TVRData, 56, TagTvr);
                                for (int i = 0; i < TagTVR_len; i++) {
                                    Log.e("TagTvr", "i = " + i + "  " + TVRData[i]);
                                    Tag95_data += ByteUtil.byteToHexString(TVRData[i] /*& 0xFF*/);
                                }
                                if (TagTVR_len % 2 != 0) {
                                    Tag95_data = Tag95_data.substring(0, TagTVR_len * 2 );
                                }
                                Log.e("Tag95", "-Tag95_data=----" + Tag95_data);

//
                                PinData_len = emvcoHelper.PayWaveGetTagData(PinData, 56, TagPIN);

                                String TagPin_data = "";
                                for (int i = 0; i < PinData_len; i++) {
                                    Log.e("EMV PinData", "i = " + i + "  " + PinData[i]);
                                    TagPin_data += ByteUtil.byteToHexString(PinData[i] /*& 0xFF*/);
                                }
//                        final String TagPin_data = new String(PinData, 0, PinData_len);
                                final String finalTagPin_data = ByteUtil.hexStr2Str(TagPin_data);

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(ProductCart.this, strEmvStatus + "\n\nCardNO:" + PAN + "\n\n" + "TVR:" + Tag95_data,Toast.LENGTH_LONG).show();
                                    }
                                });
                                Log.e("EMV PinData", "-TagPin_data=----" + TagPin_data);






                                emvcoHelper.PayWaveFinal();

                            }
                            ///*******************---if (mCardType == 2) {---******************************///

                            else if (mCardType == 2) {
                                Log.e("Paypass", "Paypass Kernel Test");
                                int TagName = 0xDF8129;

                                int result  = emvcoHelper.PaypassProcess();
                                Log.e("Paypass", "Paypass PaypassProcess ret->" + result);

                                int Data_len  = emvcoHelper.PaypassGetTagValue(PaypassTagBuff, 1024, TagName );
                                Log.e("Paypass", "Paypass PaypassGetTagValue" + Data_len);
                                for (int i = 0; i < Data_len; i++) {
                                    Log.e("CardNoData ", "i = " + i + "  " + PaypassTagBuff[i]);
                                    PaypssTag57_data += ByteUtil.byteToHexString(PaypassTagBuff[i] /*& 0xFF*/);
                                }

                                if (Data_len / 2 != 0) {
                                    PaypssTag57_data = PaypssTag57_data.substring(0, Data_len * 2 );
                                }


                                emvcoHelper.PaypassFinal();
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(ProductCart.this, PaypssTag57_data,Toast.LENGTH_LONG).show();
                                    }
                                });
                                emvcoHelper.EmvFinal();
                            }


                            m_bThreadFinished = true;
                            Log.w("EMV","...............EMV  pay Process end......................"+m_bThreadFinished);
                        break;
                    default:
                        break;

                }//END OF SWITCH


            }
        }
    }
    private static final Pattern track2Pattern = Pattern.compile("^([0-9]{1,19})(?:[=Dd])([0-9]{4}|=)([0-9]{3}|=).*$");
    private static final Pattern track1Pattern = Pattern.compile("^.*?([0-9]{10,19})\\^([^^]{2,26})\\^([0-9]{4}|\\^)([0-9]{3}|\\^)[^;]*(;([^?]*)\\?.*)?$");

    public static String getContactlessPan(String track2) {
        Matcher matcher = track2Pattern.matcher(track2);
        if (matcher.find()) {
            return matcher.group(1);
        } else {
            return null;
        }
    }

    public static String getCardHolderName(String track1) {
        Matcher matcher = track1Pattern.matcher(track1);
        if (matcher.find()) {
            return matcher.group(2);
        } else {
            return null;
        }
    }

    private static final String DISABLE_FUNCTION_LAUNCH_ACTION = "android.intent.action.DISABLE_FUNCTION_LAUNCH";

    // disable the power key when the device is boot from alarm but not ipo boot
    private void disableFunctionLaunch(boolean state) {
        Intent disablePowerKeyIntent = new Intent(DISABLE_FUNCTION_LAUNCH_ACTION);
        if (state) {
            disablePowerKeyIntent.putExtra("state", true);
        } else {
            disablePowerKeyIntent.putExtra("state", false);
        }
        sendBroadcast(disablePowerKeyIntent);
    }
}

